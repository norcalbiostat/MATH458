---
title: "Simple Random Sampling"
description: "SRS is the basic form of probability sampling, and serves as the basis for more complicated forms."
author: DRAFT
date: 2/20/23
execute: 
  error: true
---


::: {.callout-note appearance="minimal"}
These notes use functions from the [sampling](https://cran.r-project.org/web/packages/sampling/index.html), and [survey](https://r-survey.r-forge.r-project.org/survey/) packages.[The best way to learn a new package is to reference the help file and vignette often for examples.  The R Companion for the book (free pdf from book website) is also very helpful. ]{.aside}
:::

```{r, echo=FALSE}
library(sampling)
```

# Introduction

This section will aim to answer the following questions: 

* How can we draw a simple random sample of observations from a data set both with, and without replacement: 
* What is the finite population correction (fpc) and why do we need it? 
* What are sampling weights, why do we need them, and how are they created? 
* How do we calculate parameter estimates from an SRS that account for both the fpc and sampling weights? 

# Drawing a Simple Random Sample (Lohr Ch 2.3)

Recall there are two ways to draw simple random samples, with and without replacement.

::: callout-important
### Definition: Simple random sample (SRSWR) with replacement:

A SRSWR of size $n$ from a population of size $N$ can be thought of as drawing $n$ independent samples of size 1. Each unit has the same probability of selection: $\delta_{i} = \frac{1}{N}$

The procedure is repeated until the sample has $n$ units, which may include duplicates.
:::

::: callout-important
### Definition: Simple random sample (SRS) without replacement:

A SRS of size $n$ is selected so that every possible subset of $n$ distinct units in the population has the same probability of being selected as the sample. There are $\binom{N}{n}$ possible samples, resulting in a selection probability for an individual unit $\delta_{i} = \frac{n}{N}$. (See Lohr 2.10 and Appendix A for derivation)
:::

## Intentionality in sampling

Random does not mean haphazard, contrary it's actually quite intentional. Avoid selecting a sample that you "feel" is random or representative of the population. These practices can lead to bias and lack of generalizability.

To avoid the haphazard nature of "blindly choosing", or worse looking at what was sampled and changing it because "it doesn't look random enough", we use techniques that leverage pseudo-random number generating algorithms.

::: callout-important
### Process 

1.  Generate a list of all observational units in the population (sampling frame).
2.  Assign each observational unit a unique number, from 1 to the size of the sampling frame $N$.
3.  Use a computer to draw $n$ numbers from 1 to $N$ without replacement.
4.  Subset the data to keep only the selected rows.
:::

## Drawing a SRS using a computer

Previously we saw how to use the `sample` function to accomplish this. An alternative is to use the functions `srswor` or `srswr` from the `sampling` package. Each have their pros and cons, so we explore both. 

:::{.callout-tip icon=true}
### Example: Sampling from Dr. D's animal names. 
```{r}
set.seed(4134)
my.animals <- c("Toki", "Meka", "Riley", "TJ", "Dodger", "DC", "Sid", "Spike")
```
:::

When using `sample()` the vector of data that you want to sample from is provided as the first argument, and what is returned is the values in that vector.

```{r}

```

The functions `srswr` and `srswor` draw SRS with, and without replacement respectively. Each take two arguments: $n$ the sample size, and $N$ the population size, and what is returned is a vector of length $N$ that indicates how many times that position in the vector is selected.

```{r}
set.seed(4134)

```

Then the `getdata()` function is used to extract the values from the population the indicated number of times.

```{r}

```

This method can be advantageous when drawing with replacement from a large dataset.

:::{.callout-warning icon=false}
### :star: You try it 

The U.S. government conducts a Census of Agriculture every five years, collecting data on all farms (defined as any place from which \$1000 or more of agricultural products were produced and sold). The file `agpop.csv` (textbook data) contains historical information from 1982, 1987, and 1992 on the number of farms, total acreage devoted to farms, number of farms with fewer than 9 acres, and number of farms with more than 1000 acres for the population consisting of the $N=3078$ counties and county-equivalents in the United States.

Draw a sample of 300 farms without replacement using both `sample` and `srswor`. Save one of these data frames with the name `ag.srs` for later use. 
:::

# Formulas for Estimation

Below is a table of common statistics and how they are estimated under the SRS framework. This table can also be found on the [formulas](https://sampling-458.netlify.app/notes/formulas.html) page. 

| Measure    | Unbiased Estimate $(\hat{\theta})$         | Estimated variance of $(\hat{\theta})$                             |
|------------------|-------------------------|-----------------------------|
| Mean       | $\bar{y} = \frac{1}{n}\sum_{i\in S} y_{i}$ | $\hat{V}(\bar{y}) = (1-\frac{n}{N})\frac{s^{2}}{n}$                |
| Total      | $\hat{\tau} = N\bar{y}$                    | $\hat{V}(\hat{\tau}) = N^{2}\hat{V}(\bar{y})$                      |
| Proportion | $\hat{p} = \bar{y}$                        | $\hat{V}(\hat{p}) = (1-\frac{n}{N})\frac{\hat{p}(1-\hat{p})}{n-1}$ |

* $i \in S$ : Unit $i$ is an element in the sample $S$

Did you notice something different about the formula for the variances? 

::: callout-important
### Finite Population Correction

\vspace{2cm} 

The larger % of the population that you include in your sample (sampling fraction = $\frac{n}{N}$), the closer you are to a census, the smaller the variability your estimate will have.
:::

* Most samples that are taken from a very large population, the fpc is close to ____.
* So the variance is more determined by ___________, not the % of the ___________.

:::{.callout-tip icon=true}
### Example
Calculate the estimated standard deviation of the sample mean $\sqrt{\hat{V}(\bar{y})}$ of the the number of acres devoted to farms in 1992 (variable `acres92`). Interpret this number. 
:::

```{r}

```

[Inline R code: `prettyNum(sd.ybar, big.mark=',')`]{.aside}
Sample means generated from samples of size ________ will vary from sample to sample by _______________ acres. 


:::{.callout-warning icon=false}
### :star: You try it
Draw a sample of size 500, and estimate the standard deviation of the sample proportion of the number of farms with less than 200,000 acres. 
:::

:::{.callout-important icon=false collapse="true" appearance=minimal}
### Clean up
As we go through these notes, we create a lot of the same named objects, like `n` and `N`, or `idx` and `idx2`. Every once in a while its a good idea to clean out your global environment to not get confused. Use the `rm()` function to remove everything except the population `ag`, our sample of 300 `ag.srs`, and their respective sample sizes: `n` and `N`. 
```{r}
rm()
```

:::

# Sampling Weights (Lohr Ch 2.4)

Recall that a goal of sampling is to obtain a representative sample, one that is similar to the true unknown population. Thus, conceptually if we duplicate certain units from our sample a certain amount of times, we could "reconstruct" what the population looks like. That is, we could create $w_{i}$ copies of unit $i$ for each unit in the sample. 

::: callout-important
### Definition: Sampling Weight (Design weight)

Inverse of the inclusion/selection probability for unit $i$. 


Also interpreted as the number of population units represented by unit $i$.
:::

In an SRS, each unit has an inclusion probability of $\delta_{i} = \frac{n}{N}$, so the sampling weights are all $w_{i} =\frac{N}{n}$. 

[We _did_ do this in cn03 with the quiz scores when using the `rep` function to repeat the data values $y_{i}$, $f_{i}$ times. [ref](https://sampling-458.netlify.app/notes/cn03-statistical_foundations.html#numerical-summaries)]{.aside}
We don't _actually_ make $w_{i}$ copies of record $i$, but use these weights as a multiplier in our estimation calculations. 

|         Population size         |                   Total                    |                   Mean                    |
|:---------------------:|:-----------------:|:-----------------------:|
| $\hat{N} = \sum_{i \in S}w_{i}$ | $\hat{\tau} = \sum_{i \in S}w_{i}y_{i}$ | $\bar{y} = \frac{\hat{\tau}}{\hat{N}}$ |

These weighted estimators are used in all probability sampling designs. 

:::{.callout-tip icon=true}
### Example: Calculating weighted estimates
Estimate the total and average number of acres devoted to farms in 1992 using both weighted and unweighted estimates. Then compare these values to the parameter. 
:::

The sampling weights are $w_{i} = \frac{3078}{300}$ for each unit $i$ in the sample, so we'll add that on as a new column before calculating the weighted estimates. 
[See Lohr Table 2.1 for a nicer visual of the data frame with weights. ]{.aside}
```{r}

```

Calculate weighted and unweighted estimates, then the pop parameters. 
```{r}
tau.hat.wt <- 
y.bar.wt   <- 
tau.hat.nowt <- 
y.bar.nowt   <- 
mu  <- 
tau <- 
```

Package it in a data frame for easier viewing. 
```{r}
data.frame(
  Measure = c("Total", "Mean"), 
  Parameter = c(tau,mu),
  Unweighted = c(tau.hat.nowt, y.bar.nowt), 
  Weighted = c(tau.hat.wt, y.bar.wt)
  ) |> knitr::kable(align = 'lccc', 
             caption = "Comparing weighted and unweighted estimates")
```

#### :question: Where's my error? The weighted and unweighted mean shouldn't equal..right? :question:

:::{.callout-warning icon=false}
### :star: You try it
Calculate the proportion of farms with less than 200k acres, with, and without weights. Compare to the population proportion. 
:::

# Analysis using the `survey` package (Lohr Ch 2.6)

Survey designs are specified using the `svydesign` function. The main arguments to the the function are id to specify sampling units, weights to specify sampling weights, and fpc to specify finite population size corrections. These arguments should be given as formulas, referring to columns in a data frame given as the data argument.
[Similar to using `group_by` in dplyr, that adds a "flag" to the data set indicting that all subsequent actions are to be done to each group separately, the `svydesign` function adds information to the data set so subsequent actions know how to incorporate measures like weights and strata]{.aside}
```{r}

```

The `id` argument specifies the clusters. We are not using any clustering, so each unit has it's own id. 

## Point and interval estimates

Survey design adjusted estimates can be obtained using `svymean` and `svytotal`. 
```{r}

```

Estimates for multiple variables can be obtained at the same time. 
```{r}

```

You can pass the results to construct confidence intervals. 
```{r}

```

> interpretation here 

:::{.callout-warning icon=false}
### :star: You try it
Using your sample of 300 farms, estimate the total number of farms in the United States in 1987 and the average farm size in acres for the same year. Report both point and interval estimates. 
:::

# Determining sample size (Lohr Ch 2.7)

This topic will be covered later and include various sampling designs. 

# Topic Summary

:::{.callout-note appearance=minimal}
### :question: :busts_in_silhouette: Summarize your understanding
Using the notes in this document, and Lohr Ch 2.11, summarize your understanding of this section. See Canvas for details.
:::

