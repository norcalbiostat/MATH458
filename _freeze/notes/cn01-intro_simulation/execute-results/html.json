{
  "hash": "5256536c9e2d1b1635818d62ddee85dd",
  "result": {
    "markdown": "---\ntitle: \"Introduction to Simulation\"\ndescription: Foundations of writing your own custom functions, drawing samples and conducting a simulation.\ndate: 1/25/23\n---\n\n\n# Writing your own R functions\n\nAbstracting your code into many small functions is key for writing nice R code. Many people are initially reluctant to create their own functions. R has many built in functions and you can access many more by installing new packages. So there is no doubt that you are already using functions. This section will show you how to write your own functions.\n\n\nWriting a custom function is similar to writing down a mathematical formula with variables. Here is an example function called `sum.of.squares` which requires two arguments and returns the sum of the squares of these arguments. \n\n\n::: {.cell}\n\n```{.r .cell-code}\nsum.of.squares <- function(x,y){\n  x^2 + y^2\n}\n```\n:::\n\n\nOnce you run this code chunk the function is now available, like any of the built in functions within R. Try running `sum.of.squares(3,4)` in your console. \n\n\n::: {.cell}\n\n```{.r .cell-code}\nsum.of.squares(3,4)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 25\n```\n:::\n:::\n\n\nThe procedure for writing any other functions is similar and involves three key steps:\n\n1. Define the function\n2. Load the function into the R session\n3. Use the function\n\n## Defining functions\n\nFunctions are defined by code with a specific format:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nfunction.name <- function(arg1, arg2, arg3=2, ...){\n  newVar <- sin(arg1) + sin(arg2) # do some useful stuff\n  newVar/ arg3   # the result of the last line is the returned value\n}\n```\n:::\n\n\nTerminology: \n\n* `function.name` is the function's name. This can be any valid variable name but you should avoid using names that are used elsewhere in R.\n* `arg1,arg2,arg3` are the arguments of the function. You can write a function with any number of arguments.         - Arguments are the needed in order to make the function run. For instance, for the `sum.of.squares` function, x and y are the two arguments because R needs two numbers in order to make the function work.\n    - You can find out the default arguments for any base R function in the help file.\n* **Function body**: The function code between the `{}` brackets is run every time the function is called. This code might be very long or very short.\n* **Return value**: The last line of code is the value that will be _returned_ by the function. \n* **Load the function**: For R to be able to execute your function, it needs first to be read into memory. Similar to loading a library, until you do it functions contained within it cannot be called.\n    - To run a function you highlight the function and run it. Once you run it you don't need to run it again.\n* **Using your function**: You can now use your function. You just need to give the proper arguments and the function will return the desired value(s). This may also be called \"calling\" your function. \n\n\n:::{.callout-warning icon=false}\n### :star: You try it. Write functions for the following. \n\n1. Converts degrees Fahrenheit to degrees Celsius. The formula for the conversion is $C=(F-32)*5/9$. _Note that `F` and `c` are special characters in **R** and should not be used as variable names._ \n\n2. Compute the population standard deviation of `c(320,50,88,98,215,128)` using the following formula: $\\frac{1}{n}\\sqrt{\\sum_{i=1}^{n}\\left(y_{i}-\\bar{y}\\right)^{2}}$\n:::\n\n:::{.callout-warning icon=false collapse=\"true\" appearance=minimal}\n### Solution\n1. \n\n\n::: {.cell}\n\n```{.r .cell-code}\nF.to.C <- function(fahr){\n  (fahr - 32)*5/9\n}\n\nF.to.C(85) # mmm warm.\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 29.44444\n```\n:::\n:::\n\n\n\n2. \n\n::: {.cell}\n\n```{.r .cell-code}\ncalc.pop.sd <- function(x){\n  n <- length(x)\n  mean.x <- sum(x)/n\n  squared.diff <- (x-mean.x)^2\n  (1/n)*sqrt(sum(squared.diff))\n}\n\ncalc.pop.sd(x=c(320,50,88,98,215,128))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 37.3262\n```\n:::\n:::\n\n:::\n\n# Simulation\n\n## What is Simulation? \n\nSimulation is a way to use high-speed computer power to substitute for analytical calculation. The law of large numbers tells us that if we observe a large sample of i.i.d. random variables with finite mean, then the average of these random variables should be close to their true mean.  If we can get a computer to produce such a large i.i.d. sample, then we can average the random variables instead of trying to calculate their mean analytically. Simulations can be useful to check assumptions, examine a sampling distribution, or check the validity of the CLT in certain scenarios.\n\n\n[Notes on the Uniform Distribution https://math350.netlify.app/notes/cn4_5_unif_exp]{.aside}\n\n\n:::{.callout-tip icon=true}\n### Example: Finding the mean of a distribution. \nThe mean of the Uniform distribution on the interval [0,1] is known to be 1/2. How could we have found that out if we did not know the functional form of the uniform distribution? \n:::\n\n1. Create a large random sample from a Uniform distribution on the interval [0,1]\n2. Calculate the observed mean of that sample. \n\n\n::: {.cell}\n\n```{.r .cell-code}\nsamp.unif <- runif(10000, 0, 1) # runif(n, min, max)\nmean(samp.unif)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 0.4992068\n```\n:::\n:::\n\n\n\n:::{.callout-warning icon=false}\n### :star: You try it\n\n1. Use simulation to approximate the mean of the exponential distribution with parameter 1. Code starter: `rexp(n=____, 1)`\n2. Let $X$ stand for a random variable having the normal distribution with mean 2 and variance 49, $X\\sim N(2, 49)$. Estimate the mean of $Z = log|X| +1$ using simulation. Code starter: `rnorm(n=____, mean=___, sd=___)`, and you'll need the absolute value function: `abs()`\n:::\n\n:::{.callout-warning icon=false collapse=\"true\" appearance=minimal}\n### Solution\n1. \n\n::: {.cell}\n\n```{.r .cell-code}\nsamp.exp <- rexp(10000, 1)\nmean(samp.exp)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 1.00125\n```\n:::\n:::\n\n2. \n\n::: {.cell}\n\n```{.r .cell-code}\nsamp.norm <- rnorm(10000, 2, 49)\nZ = log(abs(samp.norm))+1\nmean(Z)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 4.279164\n```\n:::\n:::\n\n::: \n\n\n## Why is simulation useful?\n\nStatistical simulations are used to estimate features of distributions such as means of functions, quantiles, and other features that we cannot compute in closed form.  When using a simulation estimator, it is good to compute a measure of how precise the estimator is, in addition to the estimate itself.\n\nSimulation is a technique that can be used to help shed light on how a complicated system works even if detailed analysis is unavailable. For example, engineers can simulate traffic patterns in the vicinity of a construction project to see what effects various proposed restrictions might have.  Statistical simulations are used to estimate probabilistic features of our models that we cannot compute analytically.\n\n:::{.callout-tip icon=true}\n### Example: Server wait time\nTwo servers A and B in a fast food restaurant start serving customers at the same time.  They agree to meet for a break after each of them has served 10 customers.  Presumably, one of them will finish before the other and have to wait.  How long, on average, will one of the servers have to wait for the other?\n\nSuppose that we model all service times, regardless of the server as a random variable with an exponential distribution with parameter 0.3 customers per minute ($Exp(.3)$). The time it takes one server to serve 10 customers would follow a gamma distribution with parameters 10 and 0.3 ($Gamma(10, .3)$). \n\nLet $X$ be the time it takes $A$ to serve 10 customers, and let $Y$ be the time it takes server $B$ to serve 10 customers.  We are asked to compute the average difference in times, which is written as\n:::\n\n\n$$\nE(|X-Y|)\n$$\n\n\nThe most straightforward way of finding this mean analytically would require a two-dimensional integral over the union of two non-rectangular regions.\n\nOn the other hand, a computer can provide us with as many independent gamma random variables as we desire. We can then obtain a pair $(X,Y)$ and compute $Z=|X-Y|$.  We can repeat this process many times (10000 in the example below) and get an average of all the observed $Z$ values.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nX <- rgamma(10000, 10, .3)\nY <- rgamma(10000, 10, .3)\nZ <- abs(X-Y)\nmean(Z)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 11.74975\n```\n:::\n:::\n\n\n# Variability in simulation results \n\nAn important part of simulation is to assess the uncertainty in simulations. Even if we did a large number of simulations, if we repeated the simulation process we would get slightly different results. What if we wanted to repeat the above simulation several times? We can keep clicking the *run* button and record the results each time. The function `replicate()` will do this for us and much more efficiently. \n\n## Using `replicate` to repeat simulations\n\nTo use the function `replicate()`, wrap the desired code in brackets and tell R how many times we want to repeat (or replicate) the experiment. \n\n\n::: {.cell}\n\n```{.r .cell-code}\nreplicate(n=5, {\n  samp.unif <- runif(10000, 0, 1)\n  mean(samp.unif)\n})\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 0.5000171 0.5018930 0.4996907 0.5015045 0.4988815\n```\n:::\n:::\n\n\nWe will come back to this idea of repeating simulations multiple times to explore the variability in simulation results in a few sections. \n\n:::{.callout-warning icon=false}\n### :star: You try it: \nUse replicate to compute the average difference in server wait times for five different simulations. \n:::\n\n:::{.callout-warning icon=false collapse=\"true\" appearance=minimal}\n### Solution\n\n::: {.cell}\n\n```{.r .cell-code}\nreplicate(n=5, {\n  X <- rgamma(10000, 10, .3)\n  Y <- rgamma(10000, 10, .3)\n  Z <- abs(X-Y)\n  mean(Z)  \n})\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 11.85805 11.88258 11.83495 11.71446 11.68057\n```\n:::\n:::\n\n:::\n\n# Basic Sampling\n\nIn the above examples, we were sampling values from known distributions, like from the normal or gamma distribution. Sometimes we will want to draw randomly from a list of objects. The `sample()` function is used for this. \n\n:::{.callout-tip icon=true}\n### Example: \n\n::: {.cell}\n\n```{.r .cell-code}\nsample(1:6, size=5) # without replacement\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 1 4 5 3 2\n```\n:::\n\n```{.r .cell-code}\nsample(1:6, size=5, replace=TRUE) # with replacement\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 2 2 3 3 5\n```\n:::\n:::\n\n:::\n\n\n# Wrap up\n\nThe functions demonstrated in this section are to provide examples of functions and tactics we will be using throughout the semester. \n\n\n\n\n\n",
    "supporting": [
      "cn01-intro_simulation_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}