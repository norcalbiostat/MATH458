{
  "hash": "4555998d626b6abae0cc629276895cd5",
  "result": {
    "markdown": "---\ntitle: \"Formulas and Definitions\"\ndescription: \"Equations and R code\"\n---\n\n\n# Parameters and Statistics\n\n| Measure | Population $(\\theta)$ | Sample $(\\hat{\\theta})$ |\n|-------------------|--------------------------|---------------------------|\n| Total | $\\tau = \\sum_{i=1}^N y_{i}$ | $\\hat{\\tau} = \\sum_{i=1}^n y_{i}$ |\n| Mean | $\\mu = \\frac{1}{N}\\sum_{i=1}^N y_{i}$ | $\\bar{y} = \\frac{1}{n}\\sum_{i=1}^n y_{i}$ |\n| Variance | $\\sigma^2 = \\frac{1}{N}\\sum_{i=1}^{N}(y_i-\\mu)^2$ | $s^2 = \\frac{1}{n-1}\\sum_{i=1}^{n}(y_i-\\bar{y})^2$ |\n| Proportion$^*$ | $p = \\mu$ | $\\hat{p} = \\bar{y}$ |\n\n-   $N$: total population size\n-   $n$: total sample size\n-   $y_{i}$: value of measurement $y$ on unit $i$\n-   $^*$For proportions $y_{i}$ is a binary indicator of success. $y \\in {[0,1]}$. I.e. $I(y_{i}=1)$.\n\n## Expected Value and Variance\n\n$$E(\\hat{\\theta}) = \\sum \\hat{\\theta}*p(\\hat{\\theta})$$ $$\nV(\\hat{\\theta}) = \\sum [\\hat{\\theta} - E(\\hat{\\theta})]^2*p(\\hat{\\theta}) \\qquad \\mbox{ -or- }\\qquad\nV(\\hat{\\theta}) = E(\\hat{\\theta}^2) - E(\\hat{\\theta})^2\n$$\n\n-   Sums are over all possible values of $\\hat{\\theta}$.\n-   $p(\\hat{\\theta})$ is the probability of $\\hat{\\theta}$ occurring.\n\n## Definition: Bias, Variance, Accuracy\n\n$$\\mbox{Bias}(\\hat{\\theta}) = E(\\hat{\\theta}) - \\theta$$\n\n$$V(\\hat{\\theta})  = E \\Big[(\\hat{\\theta} - E[\\hat{\\theta}])^2\\Big]$$\n\n$$\\mbox{MSE}(\\hat{\\theta}) = V(\\hat{\\theta}) + [Bias(\\hat{\\theta})]^2$$\n\n# Sample Weights\n\nThe **sampling weights** $w_{i}$are the reciprocal of the inclusion probability $\\pi_{i}$\n\n-   **SRS**: $w_{i} =\\frac{1}{n}$\n-   **SRSWOR**: $w_{i} =\\frac{N}{n}$\n-   **Stratified**: $w_{hj}=\\frac{N_h}{n_h}$\n-   **One stage cluster**: $w_{ij}=\\frac{N}{n}$\n\n# Simple Random Sample\n\n| Population Quantity | Estimator $(\\hat{\\theta})$ | Estimated variance of $(\\hat{\\theta})$ |\n|---------------------|----------------------|-----------------------------|\n| Mean: $\\mu = \\frac{\\tau}{N}$ | $\\frac{\\hat{t}}{N} = \\frac{\\sum_{i\\in S} w_{i}y_{i}}{\\sum_{i\\in S}w_{i}} = \\bar{y}$ | $\\hat{V}(\\bar{y}) = (1-\\frac{n}{N})\\frac{s^{2}}{n}$ |\n| Total: $\\tau = \\sum_{i=1}^{N} y_{i}$ | $\\hat{\\tau} = \\frac{1}{n}\\sum_{i\\in S}  w_{i}y_{i} = N\\bar{y}$ | $\\hat{V}(\\hat{\\tau}) = N^{2}\\hat{V}(\\bar{y})$ |\n| Proportion: $p$ | $\\hat{p} = \\bar{y}$ | $\\hat{V}(\\hat{p}) = (1-\\frac{n}{N})\\frac{\\hat{p}(1-\\hat{p})}{n-1}$ |\n\n-   $i \\in S$ : Unit $i$ is an element in the sample $S$\n-   The **standard error** of the estimate is the square root of the estimated variance.\n\n# Stratified Random Sample\n\nSee [section-04](https://sampling-458.netlify.app/notes/cn04-stratified_sampling#theory-of-stratified-sampling-lohr-3.2) for notation. \n\n| Population Quantity | Estimator $(\\hat{\\theta})$ | Estimated variance of $(\\hat{\\theta})$ |\n|---------------------|----------------------|-----------------------------|\n| Within strata total: $\\tau_{h} = \\sum_{j} y_{hj}$ | $\\hat{\\tau}_{h} = N_{h}\\bar{y_h}$ | $\\hat{V}(\\hat{\\tau}_{h}) = (1-\\frac{n_h}{N_h})N_{h}^2 \\frac{s^2_h}{n_h}$ |\n| Overall total: $\\tau = \\sum_{h} \\tau_{h}$ | $\\hat{\\tau}_{str} = \\sum_{h}\\hat{\\tau}_{h}$  | $\\hat{V}(\\hat{\\tau}_{str}) = \\sum_{h} \\hat{V}(\\hat{\\tau}_{h})$ |\n| Within strata mean: $\\mu_{h} = \\frac{\\tau_{h}}{N_{h}}$ | $\\bar{y}_{h} = \\frac{1}{n_{h}}\\sum_{j} y_{hj}$ |  $\\hat{V}(\\bar{y}_{h}) = \\frac{1}{N^2}V(\\hat{\\tau}_{h})$ |\n| Overall mean:$\\mu = \\frac{\\tau}{N}$  | $\\bar{y}_{str} = \\sum_{h} \\frac{N_{h}}{N}\\bar{y}_{h}$ | $\\hat{V}(\\bar{y}_{str}) = \\frac{1}{N^2}\\hat{V}(\\hat{\\tau}_{str})$ |\n| Within strata proportion: $p_{h} = \\mu_{h}$ | $\\hat{p}_{h} = \\bar{y}_{h}$  |$\\hat{V}(\\hat{p}_{h}) = (\\frac{n_h}{n_h-1})\\hat{p}_h(1-\\hat{p}_h)$   |\n| Overall proportion: $p = \\mu$  |$\\hat{p}_{str} = \\sum_{h}\\frac{N_{h}}{N}\\hat{p}_{h}$  | $\\hat{V}(\\hat{p}_{str}) = \\sum_{h} (1-\\frac{n_h}{N_h})\\big(\\frac{N_{h}}{N}\\big)^2\\Big(\\frac{\\hat{p}_h(1-\\hat{p}_h)}{n_h-1}\\Big)$  |\n\n* $\\sum_{h}$ is a simplified version of $\\sum_{h=1}^{H}$ and $\\sum_{j}$ is a simplified version of $\\sum_{j=1}^{N_{h}}$\n\n# Cluster Random Sample\n\n⚠️ Note notation change!\n\n* $y_{ij}$: measurement for the $j$th element in $i$th psu\n* $N$: the number of clusters (psus) in the population\n    * $n$: the number of psus from the sample\n* $M_{i}$: number of ssus in psu $i$ in the population\n    * $m_i$: the number of ssu's in psu $i$ from the sample\n* $M_{0}$: total number of ssus in the population  \n\n| Population Quantity | Estimator $(\\hat{\\theta})$ | Estimated variance of $(\\hat{\\theta})$ |\n|---------------------|----------------------|-----------------------------|\n| Total in psu $i$: $t_{i}=\\sum_{j} y_{ij}$ | $\\hat{t}_{i} = \\frac{M_{i}}{m_i}\\sum_{j} y_{ij}$ | - |\n| Variance of psu totals : $S_t^2 = \\frac{1}{N-1} \\sum_{i} \\left( t_i - \\frac{t}{N} \\right)^2$ | $s_t^2 = \\frac{1}{n-1} \\sum_{i} \\left( t_i - \\frac{\\hat{t}}{N} \\right)^2$ | _AKA variance between psu_|\n| Overall Total: $t = \\sum_{i} t_i$ | $\\hat{t} = \\frac{N}{n}\\sum_{i} \\hat{t}_i$ | $N^2 \\left(1 - \\frac{n}{N}\\right) \\frac{s_t^2}{n}$  |\n| mean in psu $i$: $\\mu_{i} = \\frac{1}{M_i} \\sum_{j} y_{ij}$  | $\\bar{y}_{i} = \\frac{1}{m_i} \\sum_{j} y_{ij}$  | $s_{i}^{2} = \\frac{1}{m_i-1} \\sum_{j} (y_{ij}-\\bar{y}_{i})^2$ (_AKA variance within psu_)|\n| Overall mean: $\\mu = \\frac{1}{M_0} \\sum_{i} \\sum_{j} y_{ij}$  | $\\bar{y} = \\frac{\\hat{t}}{NM}$  | $\\left( 1 - \\frac{n}{N} \\right) \\frac{s_t^2}{nM^2}$ |\n\n\n------------------------------------------------------------------------\n\n# R commands\n\nThis is a quick reference list. See the R companion for the textbook, the package help files,  vignettes or other tutorials listed at the bottom of this page for more information.\n\n::: callout-important\n### A note on missing data\n\nIf the result of any of the below functions is `NA`, this may indicate that your variable has missing values. Add the `na.rm=TRUE` argument to the `svymean` or `svytotal` functions and that will calculate a complete-case mean/total.\n:::\n\n\n## Analysis\n\nThe `survey` package supports the analysis of data collected using complex survey designs. \n\n### Specify survey design `svydesign`\n\n-   Function call: `svydesign(id = , weights=,  fpc= , data = )`\n-   `id` = variable that identifies clusters\n-   `weights` = variable that holds the sampling weights\n-   `fpc` = finite population correction. Typically defined in the function call.\n\nThe argument details can be found on the specified pages in the R companion for the book, and in the respective sections of these notes. \n\n- SRS: pg 21\n- Stratified Random Sample: pg 34\n- Cluster sampling: p57\n\n### Estimators\n\n-   **mean**: `svymean(~x, design)`\n-   **total**: `svytotal(~x, design)`\n-   **proportion**: Use `svytotal` and divide by `N`\n-   **CI for the mean or total**: Use `confint()` after calculating the point estimate\n-   **CI for proportion**: `svyciprop(~x, design)` Will also print out $\\hat{p}$\n\n### Calculating stratum means and variances\n\n* The first argument of `svyby` is the formula for the variable(s) for which\nstatistics are desired\n* `(by=)` is the variable that defines the groups.\n* Then list the `design` object\n* and the name of the function that calculates the statistics. \n* Set `keep.var=TRUE` to display the standard errors for the statistics.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsvyby(~acres92, by=~region, agstrat.dsgn, svytotal, keep.var = TRUE)\n```\n:::\n\n\n------------------------------------------------------------------------\n\n# Sampling\n\nThe `sampling` package allows you to take random samples from a sampling frame using different sampling frameworks in a reproducible manner. \n\n\n1. Setup your sampling frame in a spreadsheet. [This example uses google sheets](https://docs.google.com/spreadsheets/d/13t_2a1nymS-RfAdDN1lq_WrpLD2xjy2rNsol95rD9VA) and the [googlesheets4](https://googlesheets4.tidyverse.org/articles/googlesheets4.html) package. \n\n2. Import your sampling frame into R. \n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(googlesheets4)\nframe <- read_sheet(\"https://docs.google.com/spreadsheets/d/17bg__F6Cq0zBnbPtMBsNCKNM-pyybVnhujvI2J66n_4\")\n```\n:::\n\n\n3. Use functions from the `sampling` package to draw random samples according to your design. See the links for more details on what the arguments mean. \n\n* [SRSWOR](https://sampling-458.netlify.app/notes/cn03-srs#using-the-sampling-package).\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(sampling)\nset.seed(12345)\nsrs.idx <- srswor(4, length(frame$unit_id)) \ngetdata(frame, srs.idx)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n  ID_unit unit_id group\n1      14      14     B\n2      16      16     B\n3      26      26     C\n4      28      28     C\n```\n:::\n:::\n\n\n* [Stratified](https://sampling-458.netlify.app/notes/cn04-stratified_sampling#using-r)\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(dplyr)\nframe <- frame %>% arrange(group) # sort first\nstrata.idx <- sampling::strata(data = frame,      # data set\n                 stratanames = \"group\", # variable name\n                 size = c(2,3,2,1,2),      # stratum sample sizes     \n                 method = \"srswor\")     # method for selecting within strata\ngetdata(frame, strata.idx)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n   unit_id group ID_unit      Prob Stratum\n2        2     A       2 0.2500000       1\n8        8     A       8 0.2500000       1\n10      10     B      10 0.3333333       2\n14      14     B      14 0.3333333       2\n16      16     B      16 0.3333333       2\n23      23     C      23 0.1428571       3\n28      28     C      28 0.1428571       3\n38      38     D      38 0.1428571       4\n39      39     E      39 0.1666667       5\n48      48     E      48 0.1666667       5\n```\n:::\n:::\n\n\n* [Cluster]()\n\n**One stage cluster**\n\n::: {.cell}\n\n```{.r .cell-code}\nonestage.idx <- sampling::cluster(data=frame,         # Data set\n                  clustername = \"group\",  # variable name containing clusters \n                  size = 3,               # number of clusters\n                  method = \"srswor\",      # how to draw clusters \n                  description = TRUE)     # show descriptive output\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nNumber of selected clusters: 3 \nNumber of units in the population and number of selected units: 50 24 \n```\n:::\n\n```{.r .cell-code}\ngetdata(frame, onestage.idx)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n   unit_id group ID_unit Prob\n1        3     A       3  0.6\n2        2     A       2  0.6\n3        7     A       7  0.6\n4        4     A       4  0.6\n5        1     A       1  0.6\n6        6     A       6  0.6\n7        8     A       8  0.6\n8        5     A       5  0.6\n9       12     B      12  0.6\n10       9     B       9  0.6\n11      11     B      11  0.6\n12      16     B      16  0.6\n13      13     B      13  0.6\n14      10     B      10  0.6\n15      15     B      15  0.6\n16      17     B      17  0.6\n17      14     B      14  0.6\n18      38     D      38  0.6\n19      32     D      32  0.6\n20      33     D      33  0.6\n21      34     D      34  0.6\n22      35     D      35  0.6\n23      36     D      36  0.6\n24      37     D      37  0.6\n```\n:::\n:::\n\n\n\n**Two stage cluster**\n\n::: {.cell}\n\n```{.r .cell-code}\nmstage.idx <- sampling::mstage(data=frame, \n                 stage = c(\"cluster\", \"\"),  # sampling method for each stage, blank means SRS\n                 varnames = list(\"group\", \"unit_id\"),  # variable names for each stage\n                 size = list(3, c(5,5,5)), # 3 psus, 5 ssus from each psu\n                 method = c(\"srswor\", \"srswor\"))\n\ngetdata(frame, mstage.idx)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[[1]]\n   unit_id group ID_unit Prob_ 1 _stage\n1        8     A       8            0.6\n2        6     A       6            0.6\n3        7     A       7            0.6\n4        3     A       3            0.6\n5        5     A       5            0.6\n6        1     A       1            0.6\n7        2     A       2            0.6\n8        4     A       4            0.6\n9       25     C      25            0.6\n10      18     C      18            0.6\n11      19     C      19            0.6\n12      20     C      20            0.6\n13      21     C      21            0.6\n14      22     C      22            0.6\n15      23     C      23            0.6\n16      24     C      24            0.6\n17      29     C      29            0.6\n18      26     C      26            0.6\n19      27     C      27            0.6\n20      28     C      28            0.6\n21      30     C      30            0.6\n22      31     C      31            0.6\n23      38     D      38            0.6\n24      32     D      32            0.6\n25      33     D      33            0.6\n26      34     D      34            0.6\n27      35     D      35            0.6\n28      36     D      36            0.6\n29      37     D      37            0.6\n\n[[2]]\n   unit_id group ID_unit Prob_ 2 _stage      Prob\n1        6     A       6      0.6250000 0.3750000\n2        7     A       7      0.6250000 0.3750000\n3        3     A       3      0.6250000 0.3750000\n4        5     A       5      0.6250000 0.3750000\n5        1     A       1      0.6250000 0.3750000\n6       18     C      18      0.3571429 0.2142857\n7       20     C      20      0.3571429 0.2142857\n8       29     C      29      0.3571429 0.2142857\n9       27     C      27      0.3571429 0.2142857\n10      31     C      31      0.3571429 0.2142857\n11      38     D      38      0.7142857 0.4285714\n12      32     D      32      0.7142857 0.4285714\n13      33     D      33      0.7142857 0.4285714\n14      34     D      34      0.7142857 0.4285714\n15      37     D      37      0.7142857 0.4285714\n```\n:::\n:::\n\n\n\n------------------------------------------------------------------------\n\n# Vignettes and handbooks\n\n-   [`survey` package vignette](http://r-survey.r-forge.r-project.org/survey/)\n-   [The Epidemiologist R handbook](https://epirhandbook.com/en/survey-analysis.html)\n-   [Blog post by Zachary Hertz from 2021](https://zacharylhertz.github.io/posts/2021/06/survey-package)\n",
    "supporting": [
      "formulas_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}