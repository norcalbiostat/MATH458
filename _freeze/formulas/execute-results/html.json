{
  "hash": "31cdac7efa58eef1c34c530c2f4d4bce",
  "result": {
    "markdown": "---\ntitle: \"Formulas and Definitions\"\ndescription: \"Equations and R code\"\n---\n\n\n# Parameters and Statistics\n\n| Measure | Population $(\\theta)$ | Sample $(\\hat{\\theta})$ |\n|-------------------|--------------------------|---------------------------|\n| Total | $\\tau = \\sum_{i=1}^N y_{i}$ | $\\hat{\\tau} = \\sum_{i=1}^n y_{i}$ |\n| Mean | $\\mu = \\frac{1}{N}\\sum_{i=1}^N y_{i}$ | $\\bar{y} = \\frac{1}{n}\\sum_{i=1}^n y_{i}$ |\n| Variance | $\\sigma^2 = \\frac{1}{N}\\sum_{i=1}^{N}(y_i-\\mu)^2$ | $s^2 = \\frac{1}{n-1}\\sum_{i=1}^{n}(y_i-\\bar{y})^2$ |\n| Proportion$^*$ | $p = \\mu$ | $\\hat{p} = \\bar{y}$ |\n\n-   $N$ = total population size\n\n-   $y_{i}$ = Value of measurement $y$ on unit $i$\n\n-   $^*$For proportions $y_{i}$ is a binary indicator of success. $y \\in {[0,1]}$. I.e. $I(y_{i}=1)$.\n\n## Expected Value and Variance\n\n$$E(\\hat{\\theta}) = \\sum \\hat{\\theta}*p(\\hat{\\theta})$$ $$\nV(\\hat{\\theta}) = \\sum [\\hat{\\theta} - E(\\hat{\\theta})]^2*p(\\hat{\\theta}) \\qquad \\mbox{ -or- }\\qquad\nV(\\hat{\\theta}) = E(\\hat{\\theta}^2) - E(\\hat{\\theta})^2\n$$\n\n-   Sums are over all possible values of $\\hat{\\theta}$.\n-   $p(\\hat{\\theta})$ is the probability of $\\hat{\\theta}$ occurring.\n\n## Definition: Bias, Variance, Accuracy\n\n$$\\mbox{Bias}(\\hat{\\theta}) = E(\\hat{\\theta}) - \\theta$$\n\n$$V(\\hat{\\theta})  = E \\Big[(\\hat{\\theta} - E[\\hat{\\theta}])^2\\Big]$$\n\n$$\\mbox{MSE}(\\hat{\\theta}) = V(\\hat{\\theta}) + [Bias(\\hat{\\theta})]^2$$\n\n# Sample Weights\n\nThe **sampling weights** $w_{i}$are the reciprocal of the inclusion probability $\\pi_{i}$\n\n-   **SRS**: $w_{i} =\\frac{1}{n}$\n-   **SRSWOR**: $w_{i} =\\frac{N}{n}$\n-   **Stratified**: $w_{hj}=\\frac{N_h}{n_h}$\n\n# Simple Random Sample\n\n| Population Quantity | Estimator $(\\hat{\\theta})$ | Estimated variance of $(\\hat{\\theta})$ |\n|---------------------|----------------------|-----------------------------|\n| Mean: $\\mu = \\frac{\\tau}{N}$ | $\\frac{\\hat{t}}{N} = \\frac{\\sum_{i\\in S} w_{i}y_{i}}{\\sum_{i\\in S}w_{i}} = \\bar{y}$ | $\\hat{V}(\\bar{y}) = (1-\\frac{n}{N})\\frac{s^{2}}{n}$ |\n| Total: $\\tau = \\sum_{i=1}^{N} y_{i}$ | $\\hat{\\tau} = \\frac{1}{n}\\sum_{i\\in S}  w_{i}y_{i} = N\\bar{y}$ | $\\hat{V}(\\hat{\\tau}) = N^{2}\\hat{V}(\\bar{y})$ |\n| Proportion: $p$ | $\\hat{p} = \\bar{y}$ | $\\hat{V}(\\hat{p}) = (1-\\frac{n}{N})\\frac{\\hat{p}(1-\\hat{p})}{n-1}$ |\n\n-   $i \\in S$ : Unit $i$ is an element in the sample $S$\n-   The **standard error** of the estimate is the square root of the estimated variance.\n\n# Stratified Random Sample\n\nSee [section-04](https://sampling-458.netlify.app/notes/cn04-stratified_sampling#theory-of-stratified-sampling-lohr-3.2) for notation. \n\n| Population Quantity | Estimator $(\\hat{\\theta})$ | Estimated variance of $(\\hat{\\theta})$ |\n|---------------------|----------------------|-----------------------------|\n| Within strata total: $\\tau_{h} = \\sum_{j} y_{hj}$ | $\\hat{\\tau}_{h} = N_{h}\\bar{y_h}$ | $\\hat{V}(\\hat{\\tau}_{h}) = (1-\\frac{n_h}{N_h})N_{h}^2 \\frac{s^2_h}{n_h}$ |\n| Overall total: $\\tau = \\sum_{h} \\tau_{h}$ | $\\hat{\\tau}_{str} = \\sum_{h}\\hat{\\tau}_{h}$  | $\\hat{V}(\\hat{\\tau}_{str}) = \\sum_{h} \\hat{V}(\\hat{\\tau}_{h})$ |\n| Within strata mean: $\\mu_{h} = \\frac{\\tau_{h}}{N_{h}}$ | $\\bar{y}_{h} = \\frac{1}{n_{h}}\\sum_{j} y_{hj}$ |  $\\hat{V}(\\bar{y}_{h}) = \\frac{1}{N^2}V(\\hat{\\tau}_{h})$ |\n| Overall mean:$\\mu = \\frac{\\tau}{N}$  | $\\bar{y}_{str} = \\sum_{h} \\frac{N_{h}}{N}\\bar{y}_{h}$ | $\\hat{V}(\\bar{y}_{str}) = \\frac{1}{N^2}\\hat{V}(\\hat{\\tau}_{str})$ |\n| Within strata proportion: $p_{h} = \\mu_{h}$ | $\\hat{p}_{h} = \\bar{y}_{h}$  |$\\hat{V}(\\hat{p}_{h}) = (\\frac{n_h}{n_h-1})\\hat{p}_h(1-\\hat{p}_h)$   |\n| Overall proportion: $p = \\mu$  |$\\hat{p}_{str} = \\sum_{h}\\frac{N_{h}}{N}\\hat{p}_{h}$  | $\\hat{V}(\\hat{p}_{str}) = \\sum_{h} (1-\\frac{n_h}{N_h})\\big(\\frac{N_{h}}{N}\\big)^2\\Big(\\frac{\\hat{p}_h(1-\\hat{p}_h)}{n_h-1}\\Big)$  |\n\n* $\\sum_{h}$ is a simplified version of $\\sum_{h=1}^{H}$ and $\\sum_{j}$ is a simplified version of $\\sum_{j=1}^{N_{h}}$\n\n\n------------------------------------------------------------------------\n\n# R commands\n\nThis is a quick reference list. See the R companion for the textbook, the package help files,  vignettes or other tutorials listed at the bottom of this page for more information.\n\n::: callout-important\n### A note on missing data\n\nIf the result of any of the below functions is `NA`, this may indicate that your variable has missing values. Add the `na.rm=TRUE` argument to the `svymean` or `svytotal` functions and that will calculate a complete-case mean/total.\n:::\n\n\n## Analysis\n\nThe `survey` package supports the analysis of data collected using complex survey designs. \n\n### Specify survey design `svydesign`\n\n-   Function call: `svydesign(id = , weights=,  fpc= , data = )`\n-   `id` = variable that identifies clusters\n-   `weights` = variable that holds the sampling weights\n-   `fpc` = finite population correction. Typically defined in the function call.\n\nThe argument details can be found on the specified pages in the R companion for the book, and in the respective sections of these notes. \n\n- SRS: pg 21\n- Stratified Random Sample: pg 34\n\n### Estimators\n\n-   **mean**: `svymean(~x, design)`\n-   **total**: `svytotal(~x, design)`\n-   **proportion**: Use `svytotal` and divide by `N`\n-   **CI for the mean or total**: Use `confint()` after calculating the point estimate\n-   **CI for proportion**: `svyciprop(~x, design)` Will also print out $\\hat{p}$\n\n### Calculating stratum means and variances\n\n* The first argument of `svyby` is the formula for the variable(s) for which\nstatistics are desired\n* `(by=)` is the variable that defines the groups.\n* Then list the `design` object\n* and the name of the function that calculates the statistics. \n* Set `keep.var=TRUE` to display the standard errors for the statistics.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsvyby(~acres92, by=~region, agstrat.dsgn, svytotal, keep.var = TRUE)\n```\n:::\n\n\n------------------------------------------------------------------------\n\n# Sampling\n\nThe `sampling` package allows you to take random samples from a sampling frame using different sampling frameworks in a reproducible manner. \n\n\n1. Setup your sampling frame in a spreadsheet. [This example uses google sheets](https://docs.google.com/spreadsheets/d/13t_2a1nymS-RfAdDN1lq_WrpLD2xjy2rNsol95rD9VA) and the [googlesheets4](https://googlesheets4.tidyverse.org/articles/googlesheets4.html) package. \n\n2. Import your sampling frame into R. \n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(googlesheets4)\nframe <- read_sheet(\"https://docs.google.com/spreadsheets/d/13t_2a1nymS-RfAdDN1lq_WrpLD2xjy2rNsol95rD9VA\")\n```\n:::\n\n\n3. Use functions from the `sampling` package to draw random samples according to your design. See the links for more details on what the arguments mean. \n\n* [SRSWOR](https://sampling-458.netlify.app/notes/cn03-srs#using-the-sampling-package).\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(sampling)\nset.seed(12345)\nsrs.idx <- srswor(4, length(frame$unit_id)) \ngetdata(frame, srs.idx)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n  ID_unit group unit_id\n1      14     B       7\n2      16     B       9\n3      26     D       1\n4      28     D       3\n```\n:::\n:::\n\n\n* [Stratified](https://sampling-458.netlify.app/notes/cn04-stratified_sampling#using-r)\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(dplyr)\nframe <- frame %>% arrange(group) # sort first\nstrata.idx <- sampling::strata(data = frame,      # data set\n                 stratanames = \"group\", # variable name\n                 size = c(2,3,2,1,2),      # stratum sample sizes     \n                 method = \"srswor\")     # method for selecting within strata\ngetdata(frame, strata.idx)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n   unit_id group ID_unit       Prob Stratum\n2        2     A       2 0.28571429       1\n5        5     A       5 0.28571429       1\n9        2     B       9 0.30000000       2\n13       6     B      13 0.30000000       2\n15       8     B      15 0.30000000       2\n20       3     C      20 0.25000000       3\n23       6     C      23 0.25000000       3\n32       7     D      32 0.07692308       4\n39       1     E      39 0.16666667       5\n48      10     E      48 0.16666667       5\n```\n:::\n:::\n\n\n* [Cluster]()\n\n**One stage cluster**\n\n::: {.cell}\n\n```{.r .cell-code}\nonestage.idx <- sampling::cluster(data=frame,         # Data set\n                  clustername = \"group\",  # variable name containing clusters \n                  size = 3,               # number of clusters\n                  method = \"srswor\",      # how to draw clusters \n                  description = TRUE)     # show descriptive output\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nNumber of selected clusters: 3 \nNumber of units in the population and number of selected units: 50 30 \n```\n:::\n\n```{.r .cell-code}\ngetdata(frame, onestage.idx)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n   unit_id group ID_unit Prob\n1        4     A       4  0.6\n2        1     A       1  0.6\n3        2     A       2  0.6\n4        3     A       3  0.6\n5        7     A       7  0.6\n6        5     A       5  0.6\n7        6     A       6  0.6\n8        6     B      13  0.6\n9        5     B      12  0.6\n10      10     B      17  0.6\n11       7     B      14  0.6\n12       8     B      15  0.6\n13       9     B      16  0.6\n14       1     B       8  0.6\n15       2     B       9  0.6\n16       3     B      10  0.6\n17       4     B      11  0.6\n18      13     D      38  0.6\n19       1     D      26  0.6\n20       2     D      27  0.6\n21       3     D      28  0.6\n22       4     D      29  0.6\n23       5     D      30  0.6\n24       6     D      31  0.6\n25       7     D      32  0.6\n26       8     D      33  0.6\n27       9     D      34  0.6\n28      10     D      35  0.6\n29      11     D      36  0.6\n30      12     D      37  0.6\n```\n:::\n:::\n\n\n\n**Two stage cluster**\n\n::: {.cell}\n\n```{.r .cell-code}\nmstage.idx <- sampling::mstage(data=frame, \n                 stage = c(\"cluster\", \"\"),  # sampling method for each stage, blank means SRS\n                 varnames = list(\"group\", \"unit_id\"),  # variable names for each stage\n                 size = list(3, c(5,5,5)), # 3 psus, 5 ssus from each psu\n                 method = c(\"srswor\", \"srswor\"))\n\ngetdata(frame, mstage.idx)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[[1]]\n   unit_id group ID_unit Prob_ 1 _stage\n1        6     A       6            0.6\n2        7     A       7            0.6\n3        3     A       3            0.6\n4        5     A       5            0.6\n5        1     A       1            0.6\n6        2     A       2            0.6\n7        4     A       4            0.6\n8        8     C      25            0.6\n9        1     C      18            0.6\n10       2     C      19            0.6\n11       3     C      20            0.6\n12       4     C      21            0.6\n13       5     C      22            0.6\n14       6     C      23            0.6\n15       7     C      24            0.6\n16      13     D      38            0.6\n17       1     D      26            0.6\n18       2     D      27            0.6\n19       3     D      28            0.6\n20       4     D      29            0.6\n21       5     D      30            0.6\n22       6     D      31            0.6\n23       7     D      32            0.6\n24       8     D      33            0.6\n25       9     D      34            0.6\n26      10     D      35            0.6\n27      11     D      36            0.6\n28      12     D      37            0.6\n\n[[2]]\n   group unit_id ID_unit Prob_ 2 _stage      Prob\n1      A       7       7      0.7142857 0.4285714\n2      A       3       3      0.7142857 0.4285714\n3      A       5       5      0.7142857 0.4285714\n4      A       1       1      0.7142857 0.4285714\n5      A       2       2      0.7142857 0.4285714\n6      C       1      18      0.6250000 0.3750000\n7      C       2      19      0.6250000 0.3750000\n8      C       3      20      0.6250000 0.3750000\n9      C       5      22      0.6250000 0.3750000\n10     C       7      24      0.6250000 0.3750000\n11     D       3      28      0.3846154 0.2307692\n12     D       7      32      0.3846154 0.2307692\n13     D       8      33      0.3846154 0.2307692\n14     D      11      36      0.3846154 0.2307692\n15     D      12      37      0.3846154 0.2307692\n```\n:::\n:::\n\n\n\n------------------------------------------------------------------------\n\n# Vignettes and handbooks\n\n-   [`survey` package vignette](http://r-survey.r-forge.r-project.org/survey/)\n-   [The Epidemiologist R handbook](https://epirhandbook.com/en/survey-analysis.html)\n-   [Blog post by Zachary Hertz from 2021](https://zacharylhertz.github.io/posts/2021/06/survey-package)\n",
    "supporting": [
      "formulas_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}